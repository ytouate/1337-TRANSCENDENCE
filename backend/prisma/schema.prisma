// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notification {
  id          Int      @id @default(autoincrement())
  senderId    Int   
  description String
  title       String
  reiceverId   Int
  reicever    User     @relation(fields: [reiceverId], references: [id])
  time        DateTime @default(now())
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  username         String         @unique
  urlImage         String?
  imageIsUpdate    Boolean        @default(false)
  optionalMail     String?
  codeVerification Int?
  friends          User[]         @relation("UserFriends")
  friendOf         User[]         @relation("UserFriends")
  blocked          User[]         @relation("blocking")
  blockedBy        User[]         @relation("blocking")
  notifications    Notification[] 
  status           String?
  activitystatus   Boolean        @default(false)
  roomChat         chatRoom[]     @relation("userInChatRoom")
  message          Message[]
  preference       Preference?
  games            Game[]         @relation("GameUsers")
  win              Int            @default(0)
  loss             Int            @default(0)
  winRate          Float          @default(0) 
}

model chatRoom {
  id         Int       @id @default(autoincrement())
  roomName   String
  timeCreate DateTime  @default(now())
  users      User[]    @relation("userInChatRoom")
  messages   Message[]
  admins     String[]
  muteUsers  String[]
  banUsers   String[]
  status     String    @default("public")
  password   String?
}

model Message {
  id       Int      @id @default(autoincrement())
  data     String
  time     DateTime @default(now())
  roomId   Int
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  roomData chatRoom @relation(fields: [roomId], references: [id])
}

model Preference {
  id          Int    @id @default(autoincrement())
  ballColor   String @default("black")
  paddleColor String @default("black")
  mapTheme    String @default("galaxy_pink")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Game {
  id          Int        @id @default(autoincrement())
  status      GameStatus @default(OUTGOING)
  players     User[]     @relation("GameUsers")
  score1      Int        @default(0)
  score2      Int        @default(0)
  winnerId    Int        @default(-1)
  createdAt   DateTime   @default(now())
  duration    Int        @default(0)
  playerOrder Int

  @@map("games")
}

enum GameStatus {
  FINISHED
  OUTGOING
}
